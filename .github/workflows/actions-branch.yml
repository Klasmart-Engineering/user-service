name: CI Pipeline for Branches

env:
  ARGOCD_APP: uk-landingzone-user-service
  ARGOCD_APP_CHART_TAG_PATH: userService.tag

on:
  push:
    branches:
      - "**"
    tags:
      - "v*"
  pull_request:
    branches-ignore:
      - "**"

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:11.9
        env:
          POSTGRES_HOST: localhost
          POSTGRES_PORT: 5432
          POSTGRES_DB: testdb
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: kidsloop
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          # Maps tcp port 5432 on service container to the host
          - 5432:5432

    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: 16.15.1
          registry-url: https://npm.pkg.github.com/
      - name: "Install NPM dependencies"
        run: npm ci
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NODE_AUTH_PAT }}
      - name: "Static checks"
        if: github.ref == 'refs/heads/main'
        run: |
          npm run prettier-check
          npm run lint
          npm run commitlint-check -- --from=HEAD
      - name: "Unit tests"
        run: npm run coverage:unit
      - name: Upload unit test coverage to Codecov
        if: github.ref == 'refs/heads/main'
        uses: codecov/codecov-action@v2
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          directory: ./coverage_unit/
          fail_ci_if_error: false
          files: ./coverage_unit/lcov.info
          flags: unittests
          name: codecov-umbrella
          verbose: true
      - name: "Migration tests"
        run: npm run coverage:migrations
      - name: Upload migration test coverage to Codecov
        if: github.ref == 'refs/heads/main'
        uses: codecov/codecov-action@v2
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          directory: ./coverage_migrations/
          fail_ci_if_error: false
          files: ./coverage_migrations/lcov.info
          flags: migrationtests
          name: codecov-umbrella
          verbose: true
      - name: "Integration tests"
        run: npm run coverage:integration
      - name: Upload integration test coverage to Codecov
        if: github.ref == 'refs/heads/main'
        uses: codecov/codecov-action@v2
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          directory: ./coverage_integration/
          fail_ci_if_error: false
          files: ./coverage_integration/lcov.info
          flags: integrationtests
          name: codecov-umbrella
          verbose: true
      - name: "Acceptance tests"
        run: |
          curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
      
          ids=$(docker ps -a -q)
          for id in $ids
          do
            echo "$id"
            docker stop $id && docker rm $id
          done
      
          npm run build
          npx nyc instrument ./dist --in-place
          docker-compose up -d && sleep 20
          docker-compose ps
          npm run test:acceptance
      
          docker stop -t 2 user-service
          npx nyc report --require ts-node/register --reporter=lcov --reporter=json-summary --reporter=text-summary --report-dir ./coverage_acceptance
      - name: Upload acceptance test coverage to Codecov
        if: github.ref == 'refs/heads/main'
        uses: codecov/codecov-action@v2
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          directory: ./coverage_acceptance/
          fail_ci_if_error: false
          files: ./coverage_acceptance/lcov.info
          flags: acceptancetests
          name: codecov-umbrella
          verbose: true
      - name: "Upstream services tests"
        if: github.ref == 'refs/heads/main'
        run: npm run test:upstreamServices

  build:
    runs-on: ubuntu-latest
    needs: test
    if: ${{ github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v') }}
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: 16.15.1
          registry-url: https://npm.pkg.github.com/
      - name: "Install NMP dependencies"
        run: npm ci
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NODE_AUTH_PAT }}
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.ECR_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.ECR_AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-2
      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1
      - name: Build, tag, and push image to Amazon ECR
        run: |
          echo ${GITHUB_REF_NAME}
          export BRANCH_TAG=$(echo "${GITHUB_REF_NAME}" | sed -E 's/([^0-9a-zA-Z]+)/-/g' | awk '{print tolower($0)}')
          
          docker build -t $ECR_REPOSITORY .
            
          docker tag $ECR_REPOSITORY:latest $ECR_REGISTRY/$ECR_REPOSITORY:$BRANCH_TAG
          docker tag $ECR_REPOSITORY:latest $ECR_REGISTRY/$ECR_REPOSITORY:$BRANCH_TAG-${GITHUB_SHA::7}
            
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$BRANCH_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$BRANCH_TAG-${GITHUB_SHA::7}
        env:
          ECR_REGISTRY: ${{ secrets.DOCKER_REPO_URL }}
          ECR_REPOSITORY: "kidsloop-user"

  deploy-alpha-dev:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    steps:
      - name: "Deploy"
        run: |
          export BRANCH_TAG=$(echo "${GITHUB_REF_NAME}" | sed -E 's/([^0-9a-zA-Z]+)/-/g' | awk '{print tolower($0)}')
          if test -z "$BRANCH_TAG"; then export TAG=commit; else export TAG=$BRANCH_TAG;fi

          echo "TAG - ${TAG}"
          echo "COMMIT_TAG - ${GITHUB_SHA::7}"
          echo "IMAGE_TAG - $TAG-${GITHUB_SHA::7}"
          
          curl --request POST \
          --url https://circleci.com/api/v2/project/github/KL-Engineering/user-service/pipeline \
          --header "Circle-Token: $CIRCLECI_TOKEN" \
          --header "content-type: application/json" \
          --data "{\"branch\":\"main\",\"parameters\":{\"image-tag\":\"$TAG-${GITHUB_SHA::7}\"}}"
        env:
          CIRCLECI_TOKEN: ${{ secrets.CIRCLECI_TOKEN }}

  deploy-landing-zone:
    # deploy-landing-zone - this Github Actions job will deploy images created on `main` to the Kidsloop landing zone.
    # Landing zone URL: hub.landing-zone.kidsloop.live

    # ENV required: [ARGOCD_APP, ARGOCD_APP_CHART_TAG_PATH]
    # SECRETS required: [TOOLS_KUBECONFIG_CONTENT_B64, ARGOCD_AUTH_USERNAME, ARGOCD_AUTH_PASSWORD]
    runs-on: ubuntu-latest
    needs: build
    # Put any deploy conditions in here.
    if: github.ref == 'refs/heads/main'
    env:
        # Due to a Teleport bug, we are using K8 port forwarding to connect to ArgoCD for now.
        TOOLS_KUBECONFIG: '${{ github.workspace }}/.kube/tools-kubeconfig.yml'
        ARGOCD_SERVER: localhost:8080
        ARGOCD_OPTS: --grpc-web --insecure --plaintext
    steps:
      # Set up the kubeconfig file in GHA secrets first
      - name: Set up kubernetes config file
        run: |
          mkdir -p '${{ github.workspace }}/.kube' \
            && echo '${{ secrets.TOOLS_KUBECONFIG_CONTENT_B64 }}' | base64 -d > $TOOLS_KUBECONFIG

      - name: Test kubernetes connection
        run: 'kubectl version --kubeconfig $TOOLS_KUBECONFIG'

      - name: Configure ArgoCD CLI
        uses: clowdhaus/argo-cd-action@v1.9.0
        with:
          version: 2.2.5
          command: version
          options: --client

      - name: Set up kubernetes port-forwarding connection to tools cluster
        run: 'kubectl port-forward -n argocd svc/argocd-server 8080:80 --kubeconfig $TOOLS_KUBECONFIG &'

      - name: Configure tags
        run: |
          export BRANCH_TAG=$(echo "${GITHUB_REF_NAME}" | sed -E 's/([^0-9a-zA-Z]+)/-/g' | awk '{print tolower($0)}')
          export DEPLOY_TAG=$BRANCH_TAG-${GITHUB_SHA::7}
          echo "TAG    : ${TAG}"
          echo "COMMIT : ${GITHUB_SHA::7}"
          echo "IMAGE  : $DEPLOY_TAG"
          echo "TAG=$TAG" >> $GITHUB_ENV
          echo "DEPLOY_TAG=$DEPLOY_TAG" >> $GITHUB_ENV

      - name: Log into ArgoCD
        uses: clowdhaus/argo-cd-action@v1.9.0
        with:
          version: 2.2.5
          command: login
          options: >
            '${{ env.ARGOCD_SERVER }}'
            --username '${{ secrets.ARGOCD_AUTH_USERNAME }}'
            --password '${{ secrets.ARGOCD_AUTH_PASSWORD }}'
            ${{ env.ARGOCD_OPTS }}

      - name: Show ArgoCD app info
        uses: clowdhaus/argo-cd-action@v1.9.0
        with:
          version: 2.2.5
          command: app
          options: get ${{ env.ARGOCD_APP }}

      - name: Set ArgoCD app tag to build output
        uses: clowdhaus/argo-cd-action@v1.9.0
        with:
          version: 2.2.5
          command: app
          options: set ${{ env.ARGOCD_APP }} -p ${{ env.ARGOCD_APP_CHART_TAG_PATH }}=${{ env.DEPLOY_TAG }}

      - name: Sync the app now
        uses: clowdhaus/argo-cd-action@v1.9.0
        with:
          version: 2.2.5
          command: app
          options: sync ${{ env.ARGOCD_APP }} --timeout 300

      - name: Status - ArgoCD url
        if: always()
        uses: ouzi-dev/commit-status-updater@v1.1.0
        with:
          status: "${{ job.status }}"
          url: https://argocd.kidsloop.teleport.sh/applications/${{ env.ARGOCD_APP }}
          description: "Click to view the app in ArgoCD"
          name: "ArgoCD"

      - name: Status - target url
        if: always()
        uses: ouzi-dev/commit-status-updater@v1.1.0
        with:
          status: "${{ job.status }}"
          url: https://hub.landing-zone.kidsloop.live
          description: "Click to test in the 'Landing Zone' environment"
          name: "Landing Zone"
